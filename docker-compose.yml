version: "3"
services:
  postgres:
    image: "postgres:9.6"
    volumes:
      - /var/lib/postgresql/data
      - database:/var/lib/postgresql/db
    environment:
      POSTGRES_USER: odk
      POSTGRES_PASSWORD: odk
      POSTGRES_DATABASE: odk
      PGDATA: "/var/lib/postgresql/db"
    # we used to store all postgres data in an anonymous volume. this was fine except sometimes people would do docker-compose down and lose their data.
    # so this command will, if it finds the data in the old directory, move it all on over to a named volume. it will also ensure some sometimes-empty directories exist.
    # otherwise, it will double check the old directory really is empty, then start postgres.
    command: 'bash -c "[ -f /var/lib/postgresql/data/pg_hba.conf ] && { mv -uv /var/lib/postgresql/data/* /var/lib/postgresql/db/ && /bin/mkdir -pv /var/lib/postgresql/db/{{pg_commit_ts,pg_dynshmem,pg_replslot,pg_serial,pg_snapshots,pg_stat,pg_stat_tmp,pg_tblspc,pg_twophase},pg_logical/{mappings,snapshots}} && ./docker-entrypoint.sh postgres; } || { test \"$$(ls -A /var/lib/postgresql/data)\" || ./docker-entrypoint.sh postgres; }"'
    restart: always
  mail:
    container_name: mail
    image: "itsissa/namshi-smtp:4.89-2.deb9u5"
    volumes:
      - ./files/dkim/config:/etc/exim4/_docker_additional_macros:ro
      - ./files/dkim/rsa.private:/etc/exim4/domain.key:ro
    environment:
      - MAILNAME=${DOMAIN}
    restart: always

  service:
    container_name: service
    build:
      context: .
      dockerfile: service.dockerfile
    depends_on:
      - secrets
      - postgres
      - mail
      - pyxform
      - enketo
    volumes:
      - secrets:/etc/secrets
      - /data/transfer:/data/transfer
    environment:
      - DOMAIN=${DOMAIN}
    command: [ "./wait-for-it.sh", "postgres:5432", "--", "./start-odk.sh" ]
    restart: always
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: nginx.dockerfile
    depends_on:
      - service
      - enketo
    environment:
      - SSL_TYPE=${SSL_TYPE}
      - DOMAIN=${DOMAIN}
      - CERTBOT_EMAIL=${SYSADMIN_EMAIL}
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 443 || exit 1" ]
    restart: always

  pyxform:
    container_name: pyxform
    image: 'getodk/pyxform-http:v1.0.0'
    restart: always

  secrets:
    container_name: secrets
    volumes:
      - secrets:/etc/secrets
    build:
      context: .
      dockerfile: secrets.dockerfile
    command: './generate-secrets.sh'
  enketo:
    container_name: enketo
    volumes:
      - secrets:/etc/secrets
    build:
      context: .
      dockerfile: enketo.dockerfile
    restart: always
    depends_on:
      - secrets
      - enketo_redis_main
      - enketo_redis_cache
    environment:
      - DOMAIN=${DOMAIN}
      - SUPPORT_EMAIL=${SYSADMIN_EMAIL}
  enketo_redis_main:
    image: redis:5
    container_name: enketo_redis_main
    volumes:
      - ./files/enketo/redis-enketo-main.conf:/usr/local/etc/redis/redis.conf:ro
      - enketo_redis_main:/data
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
    restart: always
  enketo_redis_cache:
    image: redis:5
    container_name: enketo_redis_cache
    volumes:
      - ./files/enketo/redis-enketo-cache.conf:/usr/local/etc/redis/redis.conf:ro
      - enketo_redis_cache:/data
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
    restart: always

volumes:
  transfer:
  enketo_redis_main:
  enketo_redis_cache:
  secrets:
  database:

